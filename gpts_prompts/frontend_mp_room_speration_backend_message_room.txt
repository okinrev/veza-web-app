ok maintenant je veux ajouter la page de frontend pour la messagerie priv√© ensuite je voudrai celle pour les conversations de groups (room), je te remet les differents √©l√©ments important du backend pour que tu sache comme t'y prendre (tu peux aussi utiliser le documents API.md g√©n√©r√© plus t√¥t). d'ailleurs avant de passer au frontend pour ces deux fonctions j'aimeraiqu'elle soit bien s√©par√© dans le backend, actuellement elle sont r√©unis dans des fichiers chat.go. aide moi a bien les redre distincts avant de passer √† l'impl√©mentation du frontend:

--file: backend/db/migrations/messages.sql

CREATE TABLE IF NOT EXISTS messages (
  id SERIAL PRIMARY KEY,
  from_user INTEGER REFERENCES users(id) ON DELETE CASCADE,
  to_user INTEGER REFERENCES users(id), -- NULL si message de salon
  room TEXT, -- NULL si message priv√©
  content TEXT NOT NULL,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--file: backend/db/migrations/rooms.sql

CREATE TABLE IF NOT EXISTS rooms (
  id SERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  is_private BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

//file: backend/models/chat.go

package models

import "time"

type Room struct {
	ID        int       `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	IsPrivate bool      `db:"is_private" json:"is_private"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type Message struct {
	ID        int       `db:"id" json:"id"`
	FromUser  int       `db:"from_user" json:"from_user"`
	ToUser    *int      `db:"to_user,omitempty" json:"to_user,omitempty"`
	Room      *string   `db:"room,omitempty" json:"room,omitempty"`
	Content   string    `db:"content" json:"content"`
	Timestamp time.Time `db:"timestamp" json:"timestamp"`
}

//file: backend/routes/chat.go

package routes

import (
    "github.com/gorilla/mux"
    "veza-backend/handlers"
    "github.com/jmoiron/sqlx"
)

func RegisterChatRoutes(r *mux.Router, db *sqlx.DB) {
    r.HandleFunc("/chat/rooms", handlers.GetPublicRoomsHandler(db)).Methods("GET")
    r.HandleFunc("/chat/rooms", handlers.CreateRoomHandler(db)).Methods("POST")
    r.HandleFunc("/chat/rooms/{room}/messages", handlers.GetRoomMessagesHandler(db)).Methods("GET")
    r.HandleFunc("/chat/dm/{user_id}", handlers.GetDmHandler(db)).Methods("GET")
}


package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	"github.com/jmoiron/sqlx"
	"veza-backend/models" // ‚Üê Ajoute cet import pour acc√©der aux structs Room et Message
)

// üîç GET /chat/rooms ‚Äî Liste des salons publics
func GetPublicRoomsHandler(db *sqlx.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var rooms []models.Room

		err := db.Select(&rooms, `
            SELECT id, name, is_private, created_at 
            FROM rooms 
            WHERE is_private = false 
            ORDER BY created_at DESC
        `)
		if err != nil {
			http.Error(w, "Erreur DB", http.StatusInternalServerError)
			return
		}

		json.NewEncoder(w).Encode(rooms)
	}
}

// ‚ûï POST /chat/rooms ‚Äî Cr√©ation d‚Äôun salon
func CreateRoomHandler(db *sqlx.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var input struct {
			Name      string `json:"name"`
			IsPrivate bool   `json:"is_private"`
		}

		if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
			http.Error(w, "Donn√©es invalides", http.StatusBadRequest)
			return
		}

		_, err := db.Exec(`
            INSERT INTO rooms (name, is_private) VALUES ($1, $2)
        `, input.Name, input.IsPrivate)
		if err != nil {
			http.Error(w, "Erreur DB", http.StatusInternalServerError)
			return
		}

		w.WriteHeader(http.StatusCreated)
		w.Write([]byte(`{"message":"Salon cr√©√©"}`))
	}
}

// üìú GET /chat/rooms/{room}/messages ‚Äî Historique d‚Äôun salon
func GetRoomMessagesHandler(db *sqlx.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		room := mux.Vars(r)["room"]

		var messages []models.Message

		err := db.Select(&messages, `
            SELECT id, from_user, content, timestamp 
            FROM messages 
            WHERE room = $1 
            ORDER BY timestamp DESC 
            LIMIT 50
        `, room)
		if err != nil {
			http.Error(w, "Erreur DB", http.StatusInternalServerError)
			return
		}

		json.NewEncoder(w).Encode(messages)
	}
}

// üì© GET /chat/dm/{user_id} ‚Äî Historique d‚Äôun DM entre deux utilisateurs
func GetDmHandler(db *sqlx.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		currentUserID, ok := r.Context().Value("user_id").(int)
		if !ok || currentUserID == 0 {
			http.Error(w, "Utilisateur non authentifi√©", http.StatusUnauthorized)
			return
		}

		otherUserID, err := strconv.Atoi(mux.Vars(r)["user_id"])
		if err != nil {
			http.Error(w, "ID utilisateur invalide", http.StatusBadRequest)
			return
		}

		// V√©rifier que l'utilisateur destinataire existe
		var count int
		err = db.Get(&count, `SELECT COUNT(*) FROM users WHERE id = $1`, otherUserID)
		if err != nil || count == 0 {
			http.Error(w, "Utilisateur introuvable", http.StatusNotFound)
			return
		}

		var messages []models.Message
		err = db.Select(&messages, `
            SELECT id, from_user, to_user, content, timestamp 
            FROM messages 
            WHERE (from_user = $1 AND to_user = $2)
               OR (from_user = $2 AND to_user = $1)
            ORDER BY timestamp DESC 
            LIMIT 50
        `, currentUserID, otherUserID)
		if err != nil {
			http.Error(w, "Erreur DB", http.StatusInternalServerError)
			return
		}

		if len(messages) == 0 {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte(`{"message":"Pas de discussion avec cet utilisateur."}`))
			return
		}

		json.NewEncoder(w).Encode(messages)
	}
}




https://t.17track.net/en#nums=4PX3001760404432CN
